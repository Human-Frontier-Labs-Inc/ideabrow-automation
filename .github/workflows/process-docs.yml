name: Process Project Docs

on:
  push:
    paths:
      - 'docs/**'
  workflow_dispatch:

jobs:
  process-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Check for docs
        id: check_docs
        run: |
          if [ -d "docs" ] && [ "$(ls -A docs)" ]; then
            echo "has_docs=true" >> $GITHUB_OUTPUT
            echo "Found docs to process"
          else
            echo "has_docs=false" >> $GITHUB_OUTPUT
            echo "No docs found"
          fi
      
      - name: Process docs and create project
        if: steps.check_docs.outputs.has_docs == 'true'
        run: |
          # Extract project name from first doc
          FIRST_DOC=$(ls docs/*.md | head -1)
          if [ -f "$FIRST_DOC" ]; then
            PROJECT_NAME=$(grep "^# " "$FIRST_DOC" | head -1 | sed 's/^# //' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/-\+/-/g' | sed 's/^-//' | sed 's/-$//')
          fi
          
          # Fallback if no name found
          if [ -z "$PROJECT_NAME" ]; then
            PROJECT_NAME="auto-project"
          fi
          
          # Create unique name with timestamp
          TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
          UNIQUE_NAME="${PROJECT_NAME}-${TIMESTAMP}"
          
          echo "Processing project: $UNIQUE_NAME"
          
          # Try to create new repository (only if PAT_TOKEN is available)
          if [ -n "${{ secrets.PAT_TOKEN }}" ]; then
            echo "Creating GitHub repository..."
            gh repo create "Human-Frontier-Labs-Inc/${UNIQUE_NAME}" --private --description "Auto-generated from ideabrow-automation" || echo "Note: Could not create repo, continuing..."
            REPO_URL="git@github.com:Human-Frontier-Labs-Inc/${UNIQUE_NAME}.git"
          else
            echo "No PAT_TOKEN configured, using placeholder repo URL"
            REPO_URL="git@github.com:Human-Frontier-Labs-Inc/${UNIQUE_NAME}.git"
          fi
          
          # Prepare webhook payload - escape quotes and newlines properly
          REQUIREMENTS=$(head -100 "$FIRST_DOC" | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}' | head -c 500)
          
          # Create progress tracker content
          TRACKER_CONTENT="# Project Progress Tracker\n\n## Phase 1: Template Analysis\n- Analyze provided template\n- Understand existing features\n- Plan extensions\n\n## Phase 2: Core Features\n- Implement main functionality\n- Set up database schema\n- Create API endpoints\n\n## Phase 3: Enhancements\n- Add advanced features\n- Optimize performance\n- Integrate third-party services\n\n## Phase 4: Testing & Polish\n- Write comprehensive tests\n- Fix bugs\n- Improve UI/UX\n\n## Phase 5: Documentation & Deploy\n- Complete documentation\n- Final review\n- Deploy to production"
          
          # Send webhook to our server (if configured)
          if [ -n "${{ secrets.WEBHOOK_URL }}" ]; then
            echo "Sending webhook to: ${{ secrets.WEBHOOK_URL }}"
            curl -X POST "${{ secrets.WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"project_name\": \"${UNIQUE_NAME}\",
                \"github_repo\": \"${REPO_URL}\",
                \"requirements_summary\": \"${REQUIREMENTS}\",
                \"progress_tracker\": \"${TRACKER_CONTENT}\",
                \"starter_prompt\": \"Let's build ${PROJECT_NAME}. Start by analyzing the template and requirements.\",
                \"template_hint\": \"modern-saas/nextjs-clerk\"
              }" || echo "Webhook failed, continuing..."
          else
            echo "No webhook URL configured, skipping webhook"
          fi
          
          # Archive processed docs
          mkdir -p "processed/${UNIQUE_NAME}"
          cp -r docs/* "processed/${UNIQUE_NAME}/"
          
          # Create summary file
          cat > "processed/${UNIQUE_NAME}/PROCESSING_SUMMARY.md" << EOF
          # Processing Summary
          
          - **Project Name**: ${UNIQUE_NAME}
          - **Repository**: ${REPO_URL}
          - **Processed At**: $(date)
          - **Webhook Sent**: $([ -n "${{ secrets.WEBHOOK_URL }}" ] && echo "Yes" || echo "No")
          EOF
          
          # Remove docs to prevent re-processing
          rm -rf docs/*
          
          # Commit the changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Processed docs for ${UNIQUE_NAME}" || echo "Nothing to commit"
          git push || echo "Push failed, continuing..."
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}