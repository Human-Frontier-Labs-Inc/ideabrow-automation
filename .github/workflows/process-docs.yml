name: Process Project Docs

on:
  push:
    paths:
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  process-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Check for docs
        id: check_docs
        run: |
          if [ -d "docs" ] && [ "$(ls -A docs)" ]; then
            echo "has_docs=true" >> $GITHUB_OUTPUT
            echo "Found docs to process"
          else
            echo "has_docs=false" >> $GITHUB_OUTPUT
            echo "No docs found"
          fi
      
      - name: Setup Python
        if: steps.check_docs.outputs.has_docs == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        if: steps.check_docs.outputs.has_docs == 'true'
        run: |
          pip3 install openai requests python-dotenv
      
      - name: Generate AI Progress Tracker and Extract Project Name
        if: steps.check_docs.outputs.has_docs == 'true'
        id: generate_tracker
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          # Generate tracker using AI and extract project name
          OUTPUT=$(python3 automated-dev-orchestrator/scripts/generate_tracker_template_aware.py \
            --project-path docs \
            --output PROGRESS_TRACKER.md \
            --extract-project-name)
          
          # Extract project name from output
          PROJECT_NAME=$(echo "$OUTPUT" | grep "PROJECT_NAME:" | cut -d':' -f2 | xargs)
          
          # Fallback if extraction fails
          if [ -z "$PROJECT_NAME" ] || [ "$PROJECT_NAME" = "unnamed-project" ]; then
            echo "Warning: Could not extract project name, using fallback"
            PROJECT_NAME="auto-project"
          fi
          
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "Generated AI progress tracker for project: $PROJECT_NAME"
          
          # Read the generated tracker content
          TRACKER_CONTENT=$(cat PROGRESS_TRACKER.md | sed 's/$/\\n/' | tr -d '\n')
          echo "tracker_content=$TRACKER_CONTENT" >> $GITHUB_OUTPUT
      
      - name: Process docs and create project
        if: steps.check_docs.outputs.has_docs == 'true'
        env:
          GH_PAT: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          # Use AI-generated project name
          PROJECT_NAME="${{ steps.generate_tracker.outputs.project_name }}"
          
          # Create unique name with timestamp
          TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)
          UNIQUE_NAME="${PROJECT_NAME}-${TIMESTAMP}"
          
          echo "Processing project: $UNIQUE_NAME"
          
          # Try to create new repository (only if GH_PAT is available)
          if [ -n "${{ secrets.GH_PAT }}" ]; then
            echo "Creating GitHub repository..."
            gh repo create "Human-Frontier-Labs-Inc/${UNIQUE_NAME}" --private --description "Auto-generated from ideabrow-automation" || echo "Note: Could not create repo, continuing..."
            REPO_URL="git@github.com:Human-Frontier-Labs-Inc/${UNIQUE_NAME}.git"
          else
            echo "No GH_PAT configured, using placeholder repo URL"
            REPO_URL="git@github.com:Human-Frontier-Labs-Inc/${UNIQUE_NAME}.git"
          fi
          
          # Prepare webhook payload - escape quotes and newlines properly
          FIRST_DOC=$(ls docs/*.md | head -1)
          REQUIREMENTS=$(head -100 "$FIRST_DOC" | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}' | head -c 500)
          
          # Use the AI-generated progress tracker content
          TRACKER_CONTENT="${{ steps.generate_tracker.outputs.tracker_content }}"
          
          # If tracker is empty for some reason, use fallback
          if [ -z "$TRACKER_CONTENT" ]; then
            TRACKER_CONTENT="# Project Progress Tracker\n\n## Phase 1: Setup\n## Phase 2: Core Features\n## Phase 3: Enhancements\n## Phase 4: Testing\n## Phase 5: Deploy"
          fi
          
          # Debug: Check if secrets are available
          echo "Checking secrets..."
          echo "DEV_SERVER_WEBHOOK_URL is $([ -n "${{ secrets.DEV_SERVER_WEBHOOK_URL }}" ] && echo "configured" || echo "NOT configured")"
          echo "GH_PAT is $([ -n "${{ secrets.GH_PAT }}" ] && echo "configured" || echo "NOT configured")"
          
          # Send webhook to our server (if configured)
          if [ -n "${{ secrets.DEV_SERVER_WEBHOOK_URL }}" ]; then
            echo "Sending webhook to: ${{ secrets.DEV_SERVER_WEBHOOK_URL }}"
            curl -X POST "${{ secrets.DEV_SERVER_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"project_name\": \"${UNIQUE_NAME}\",
                \"github_repo\": \"${REPO_URL}\",
                \"requirements_summary\": \"${REQUIREMENTS}\",
                \"progress_tracker\": \"${TRACKER_CONTENT}\",
                \"starter_prompt\": \"Let's build ${PROJECT_NAME}. Start by analyzing the template and requirements.\",
                \"template_hint\": \"modern-saas/nextjs-clerk\"
              }" || echo "Webhook failed, continuing..."
          else
            echo "No DEV_SERVER_WEBHOOK_URL configured, skipping webhook"
          fi
          
          # Push initial content to the new repository
          if [ -n "${{ secrets.GH_PAT }}" ]; then
            echo "Pushing initial content to new repository..."
            
            # Create a temporary directory for the new repo
            TEMP_DIR=$(mktemp -d)
            cd "$TEMP_DIR"
            
            # Initialize new repo and add remote
            git init
            git remote add origin "$REPO_URL"
            
            # Configure git
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            
            # Copy docs to new repo
            cp -r "$GITHUB_WORKSPACE/docs"/* . 2>/dev/null || echo "No docs to copy"
            
            # Copy the AI-generated progress tracker
            if [ -f "$GITHUB_WORKSPACE/PROGRESS_TRACKER.md" ]; then
              cp "$GITHUB_WORKSPACE/PROGRESS_TRACKER.md" .
            fi
            
            # Create initial README if no docs exist
            if [ ! -f "README.md" ]; then
              echo "# ${PROJECT_NAME}" > README.md
              echo "" >> README.md
              echo "Auto-generated project from ideabrow-automation" >> README.md
              echo "" >> README.md
              echo "Created: $(date)" >> README.md
            fi
            
            # Commit and push to new repo
            git add .
            git commit -m "Initial commit with progress tracker" || echo "Nothing to commit"
            git branch -M main
            git push -u origin main || echo "Push to new repo failed"
            
            # Return to original directory
            cd "$GITHUB_WORKSPACE"
            rm -rf "$TEMP_DIR"
          fi
          
          # Archive processed docs locally
          mkdir -p "processed/${UNIQUE_NAME}"
          cp -r docs/* "processed/${UNIQUE_NAME}/" 2>/dev/null || true
          
          # Copy the AI-generated progress tracker
          if [ -f "PROGRESS_TRACKER.md" ]; then
            cp PROGRESS_TRACKER.md "processed/${UNIQUE_NAME}/"
          fi
          
          # Create summary file
          cat > "processed/${UNIQUE_NAME}/PROCESSING_SUMMARY.md" << EOF
          # Processing Summary
          
          - **Project Name**: ${UNIQUE_NAME}
          - **Repository**: ${REPO_URL}
          - **Processed At**: $(date)
          - **Webhook Sent**: $([ -n "${{ secrets.DEV_SERVER_WEBHOOK_URL }}" ] && echo "Yes" || echo "No")
          EOF
          
          # Remove docs to prevent re-processing
          rm -rf docs/*
          
          # Commit the changes to ideabrow-automation repo
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Processed docs for ${UNIQUE_NAME}" || echo "Nothing to commit"
          git push || echo "Push failed, continuing..."