#!/usr/bin/env python3
"""
GitHub Repository Creator
Creates a new repository and pushes the progress tracker
"""

import os
import sys
import json
import argparse
import subprocess
from pathlib import Path
from github import Github
from typing import Optional


def create_github_repo(token: str, org: str, repo_name: str, description: str = "") -> str:
    """Create a new GitHub repository and return its clone URL"""
    g = Github(token)
    
    try:
        # Try to create in organization
        organization = g.get_organization(org)
        repo = organization.create_repo(
            name=repo_name,
            description=description or f"Development repository for {repo_name}",
            private=False,
            auto_init=False
        )
        print(f"✓ Created repository: {org}/{repo_name}")
    except Exception as e:
        # Fallback to user account
        print(f"Note: Could not create in org {org}, using user account")
        user = g.get_user()
        repo = user.create_repo(
            name=repo_name,
            description=description or f"Development repository for {repo_name}",
            private=False,
            auto_init=False
        )
        print(f"✓ Created repository: {user.login}/{repo_name}")
    
    return repo.clone_url, repo.html_url


def initialize_repo_with_tracker(repo_url: str, tracker_path: Path, repo_name: str) -> None:
    """Initialize the repository with the progress tracker"""
    
    # Create temp directory for repo
    temp_dir = Path(f"/tmp/{repo_name}")
    if temp_dir.exists():
        subprocess.run(["rm", "-rf", str(temp_dir)], check=True)
    
    temp_dir.mkdir(parents=True)
    
    # Initialize git repo
    subprocess.run(["git", "init"], cwd=temp_dir, check=True)
    
    # Copy progress tracker
    tracker_dest = temp_dir / "PROGRESS_TRACKER.md"
    with open(tracker_path, 'r') as src, open(tracker_dest, 'w') as dst:
        dst.write(src.read())
    
    # Create initial README
    readme_path = temp_dir / "README.md"
    with open(readme_path, 'w') as f:
        f.write(f"# {repo_name}\n\n")
        f.write("AI-driven development project.\n\n")
        f.write("See [PROGRESS_TRACKER.md](PROGRESS_TRACKER.md) for development phases.\n\n")
        f.write("---\n")
        f.write("*Generated by ideabrow-automation*\n")
    
    # Git operations
    subprocess.run(["git", "add", "."], cwd=temp_dir, check=True)
    subprocess.run(["git", "commit", "-m", "Initial commit with progress tracker"], cwd=temp_dir, check=True)
    subprocess.run(["git", "branch", "-M", "main"], cwd=temp_dir, check=True)
    subprocess.run(["git", "remote", "add", "origin", repo_url], cwd=temp_dir, check=True)
    subprocess.run(["git", "push", "-u", "origin", "main"], cwd=temp_dir, check=True)
    
    print(f"✓ Pushed progress tracker to repository")
    
    # Cleanup
    subprocess.run(["rm", "-rf", str(temp_dir)], check=True)


def trigger_webhook(webhook_url: str, repo_info: dict) -> None:
    """Send webhook to development server"""
    import requests
    
    payload = {
        "project_name": repo_info["name"],
        "repo_url": repo_info["html_url"],
        "tracker_url": f"{repo_info['html_url']}/blob/main/PROGRESS_TRACKER.md",
        "requirements_summary": repo_info.get("summary", ""),
        "template_hint": repo_info.get("template", "generic"),
        "timestamp": repo_info["timestamp"]
    }
    
    try:
        response = requests.post(webhook_url, json=payload, timeout=10)
        if response.status_code == 200:
            print(f"✓ Webhook sent to development server")
            print(f"  Response: {response.json()}")
        else:
            print(f"⚠ Webhook failed: {response.status_code}")
            print(f"  Response: {response.text}")
    except Exception as e:
        print(f"⚠ Could not send webhook: {e}")


def main():
    parser = argparse.ArgumentParser(description='Create GitHub repo with progress tracker')
    parser.add_argument('--tracker', type=str, required=True,
                       help='Path to PROGRESS_TRACKER.md file')
    parser.add_argument('--project-name', type=str, required=True,
                       help='Name for the new repository')
    parser.add_argument('--org', type=str, default='Human-Frontier-Labs-Inc',
                       help='GitHub organization (default: Human-Frontier-Labs-Inc)')
    parser.add_argument('--webhook-url', type=str,
                       help='Optional webhook URL to trigger after creation')
    parser.add_argument('--metadata', type=str,
                       help='Optional JSON metadata file with project info')
    
    args = parser.parse_args()
    
    # Validate inputs
    tracker_path = Path(args.tracker)
    if not tracker_path.exists():
        print(f"Error: Tracker file {tracker_path} not found")
        sys.exit(1)
    
    # Get GitHub token (try multiple common names)
    token = os.getenv('GITHUB_TOKEN') or os.getenv('GH_PAT') or os.getenv('GITHUB_PAT')
    if not token:
        print("Error: GITHUB_TOKEN or GH_PAT environment variable not set")
        sys.exit(1)
    
    # Strip any whitespace from token
    token = token.strip()
    
    # Prepare repository name
    repo_name = f"{args.project_name}-development"
    
    # Load metadata if provided
    metadata = {}
    if args.metadata and Path(args.metadata).exists():
        with open(args.metadata, 'r') as f:
            metadata = json.load(f)
    
    try:
        # Create repository
        clone_url, html_url = create_github_repo(token, args.org, repo_name)
        
        # Initialize with tracker
        initialize_repo_with_tracker(clone_url.replace('https://', f'https://{token}@'), 
                                    tracker_path, repo_name)
        
        print(f"\n✓ Repository ready: {html_url}")
        
        # Trigger webhook if URL provided
        if args.webhook_url:
            from datetime import datetime
            repo_info = {
                "name": args.project_name,
                "html_url": html_url,
                "summary": metadata.get("summary", ""),
                "template": metadata.get("template", "generic"),
                "timestamp": datetime.utcnow().isoformat() + "Z"
            }
            trigger_webhook(args.webhook_url, repo_info)
        
        # Output result for GitHub Actions
        print(f"::set-output name=repo_url::{html_url}")
        print(f"::set-output name=repo_name::{repo_name}")
        
    except Exception as e:
        print(f"Error creating repository: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()